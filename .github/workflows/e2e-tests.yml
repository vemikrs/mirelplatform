name: E2E Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  # Japanese locale and timezone settings
  TZ: Asia/Tokyo
  LANG: ja_JP.UTF-8
  LC_ALL: ja_JP.UTF-8

jobs:
  validate-setup:
    name: Validate E2E Test Setup
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Verify Node.js version
        run: |
          echo "Node version: $(node --version)"
          node --version | grep "v18" || (echo "ERROR: Node 18 not detected!" && exit 1)

      - name: Install E2E test dependencies
        run: npm ci

      - name: Validate E2E setup
        run: npm run test:e2e:validate

      - name: Check Playwright configuration
        run: ./node_modules/.bin/playwright test --list

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-results
          path: |
            test-results/
          retention-days: 7

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate-setup
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Verify Node.js version
        run: |
          echo "Node version: $(node --version)"
          node --version | grep "v18" || (echo "ERROR: Node 18 not detected!" && exit 1)
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Install E2E test dependencies
        run: npm ci
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps --no-audit
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Build backend
        run: ./gradlew :backend:build -x test
      
      - name: Start backend service
        run: |
          echo "Starting backend service..."
          echo "Working directory: $(pwd)"
          echo "Gradlew location: $(ls -la ./gradlew)"
          SPRING_PROFILES_ACTIVE=dev SERVER_PORT=3000 ./gradlew :backend:bootRun > backend.log 2>&1 &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          echo "Backend started with PID: $BACKEND_PID"
          sleep 5
          echo "Backend process status:"
          ps aux | grep $BACKEND_PID || echo "Backend process not found"
      
      - name: Start frontend service
        run: |
          echo "Starting frontend service..."
          cd frontend
          HOST=0.0.0.0 PORT=8080 NODE_OPTIONS="--no-deprecation" npm run dev > ../frontend.log 2>&1 &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          echo "Frontend started with PID: $FRONTEND_PID"
          cd ..
          sleep 5
          echo "Frontend process status:"
          ps aux | grep $FRONTEND_PID || echo "Frontend process not found"
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for backend to be ready..."
          echo "Backend log (first 50 lines):"
          head -50 backend.log 2>/dev/null || echo "No backend log yet"
          
          for i in {1..60}; do
            if curl -sf http://localhost:3000/mipla2/actuator/health; then
              echo "✅ Backend is ready!"
              break
            fi
            echo "Attempt $i/60: Waiting for backend..."
            sleep 3
            
            if [ $i -eq 60 ]; then
              echo "❌ Backend failed to start within timeout"
              echo "=== Last 200 lines of backend log ==="
              tail -200 backend.log 2>/dev/null || echo "No backend log available"
              echo "=== Checking if backend process is running ==="
              ps aux | grep gradlew || echo "No gradlew process found"
              exit 1
            fi
          done
          
          echo "Waiting for frontend to be ready..."
          echo "Frontend log (first 50 lines):"
          head -50 frontend.log 2>/dev/null || echo "No frontend log yet"
          
          for i in {1..60}; do
            if curl -sf http://localhost:8080/mirel/; then
              echo "✅ Frontend is ready!"
              break
            fi
            echo "Attempt $i/60: Waiting for frontend..."
            sleep 3
            
            if [ $i -eq 60 ]; then
              echo "❌ Frontend failed to start within timeout"
              echo "=== Last 200 lines of frontend log ==="
              tail -200 frontend.log 2>/dev/null || echo "No frontend log available"
              echo "=== Checking if frontend process is running ==="
              ps aux | grep "npm run dev" || echo "No npm process found"
              exit 1
            fi
          done
          
          echo "✅ All services are ready!"
      
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7
      
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-${{ matrix.browser }}
          path: test-results/screenshots/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: |
          echo "Stopping services..."
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID 2>/dev/null || true
          fi
          if [ ! -z "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID 2>/dev/null || true
          fi
          pkill -f "gradlew.*bootRun" || true
          pkill -f "npm run dev" || true
          pkill -f "nuxt" || true
          echo "Services stopped"

  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate-setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps --no-audit
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Build backend
        run: ./gradlew :backend:build -x test
      
      - name: Start services
        run: |
          echo "Starting backend service..."
          SPRING_PROFILES_ACTIVE=dev SERVER_PORT=3000 ./gradlew :backend:bootRun > backend.log 2>&1 &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          echo "Backend started with PID: $BACKEND_PID"
          
          echo "Starting frontend service..."
          cd frontend
          HOST=0.0.0.0 PORT=8080 NODE_OPTIONS="--no-deprecation" npm run dev > ../frontend.log 2>&1 &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          echo "Frontend started with PID: $FRONTEND_PID"
          cd ..
          
          echo "Waiting for backend..."
          for i in {1..60}; do
            if curl -sf http://localhost:3000/mipla2/actuator/health; then
              echo "✅ Backend is ready!"
              break
            fi
            echo "Attempt $i/60: Waiting for backend..."
            sleep 3
            if [ $i -eq 60 ]; then
              echo "❌ Backend failed to start"
              tail -200 backend.log 2>/dev/null || echo "No backend log"
              exit 1
            fi
          done
          
          echo "Waiting for frontend..."
          for i in {1..60}; do
            if curl -sf http://localhost:8080/mirel/; then
              echo "✅ Frontend is ready!"
              break
            fi
            echo "Attempt $i/60: Waiting for frontend..."
            sleep 3
            if [ $i -eq 60 ]; then
              echo "❌ Frontend failed to start"
              tail -200 frontend.log 2>/dev/null || echo "No frontend log"
              exit 1
            fi
          done
          
          echo "✅ All services ready!"
      
      - name: Run accessibility tests
        run: npx playwright test --project=chromium --grep="accessibility"
      
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-audit-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: |
          echo "Stopping services..."
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID 2>/dev/null || true
          fi
          if [ ! -z "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID 2>/dev/null || true
          fi
          pkill -f "gradlew.*bootRun" || true
          pkill -f "npm run dev" || true
          pkill -f "nuxt" || true
          echo "Services stopped"
